"""
Django settings for machd project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

import environ
import firebase_admin
from firebase_admin import firestore
from firebase_admin.credentials import Certificate

from core.technical_analysis import TechnicalAnalysis, TechnicalAnalysisTemplate

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
BINANCE_DATA_DIR = BASE_DIR / 'binance_public_data' / 'data' / 'spot' / 'monthly' / 'klines'

env = environ.Env()
environ.Env.read_env(BASE_DIR / '.env')

# ? See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/
# ! SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str(
	'DJANGO_SECRET_KEY',
	default='krakenbotdjangodefaultsecretkeyxeh)n76im*jn%0n185ami6ad*l0nly=vp7ujre^(h=3w*d&99j',
)

# ! SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=False)
SKIP_AUTH = env.bool('SKIP_AUTH', default=False)

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	'rest_framework',
	'drf_spectacular',
	'api_v2.apps.ApiV2Config',
]

MIDDLEWARE = [
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'corsheaders.middleware.CorsMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ALLOWED_ORIGINS = env.str('CORS', 'http://localhost').split(';')
CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = 'machd.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
			],
		},
	},
]

REST_FRAMEWORK = {'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema'}
SPECTACULAR_SETTINGS = {'TITLE': 'MachD API', 'SERVE_INCLUDE_SCHEMA': False}

WSGI_APPLICATION = 'machd.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
	'default': {
		'ENGINE': 'django.db.backends.sqlite3',
		'NAME': BASE_DIR / 'db.sqlite3',
	}
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# KLine Downloads
KLINE_YEARS = env.str('KLINE_YEARS', default='').split(';')
KLINE_TOKENS = env.str('KLINE_TOKENS', default='BTC;GBP').split(';')
KLINE_INTERVALS = env.str('KLINE_INTERVALS', default='1h').split(';')

# Constants
INITIAL_TOKEN = 'GBP'
INITIAL_AMOUNT = 10000
DEFAULT_PLATFORM = 'binance'
DEFAULT_TIMEFRAME = '1h'
INTERVAL_MAP = {
	'1h': 60,
	'2h': 120,
	'4h': 240,
	'6h': 360,
	'12h': 720,
	'1d': 1440,
}

GOOGLE_AUTH_EMAIL = 'https://accounts.google.com'
GOOGLE_AUTH_URL = 'https://oauth2.googleapis.com/tokeninfo'
GCLOUD_EMAIL = env.str('GCLOUD_EMAIL', default='')
SERVER_API_URL = env.str('API_URL', default='')

KRAKEN_OHLC_API = 'https://api.kraken.com/0/public/OHLC'
KRAKEN_PAIR_API = 'https://api.kraken.com/0/public/Ticker'
COIN_GECKO_API = 'https://api.coingecko.com/api/v3/coins/markets'


# Firebase Connection
if env.bool('EXCLUDE_FIRESTORE', default=False) is False:
	firebase_admin_settings = {
		'type': 'service_account',
		'project_id': env.str('FIREBASE_PROJECT_ID', default=''),
		'private_key_id': env.str('FIREBASE_PRIVATE_KEY_ID', default=''),
		'private_key': env.str('FIREBASE_PRIVATE_KEY', default='').replace('\\n', '\n'),
		'client_email': env.str('FIREBASE_CLIENT_EMAIL', default=''),
		'client_id': env.str('FIREBASE_CLIENT_ID', default=''),
		'auth_uri': 'https://accounts.google.com/o/oauth2/auth',
		'token_uri': 'https://oauth2.googleapis.com/token',
		'auth_provider_x509_cert_url': 'https://www.googleapis.com/oauth2/v1/certs',
		'client_x509_cert_url': env.str('FIREBASE_CLIENT_X509_CERT_URL', default=''),
		'universe_domain': 'googleapis.com',
	}
	firebase_admin.initialize_app(Certificate(firebase_admin_settings))
	FIREBASE = firestore.client()
	DB_BATCH = FIREBASE.batch()
else:
	FIREBASE = None
	DB_BATCH = None


TA = TechnicalAnalysis()
TA_OPTIONS = TA.options

TA_TEMPLATES = TechnicalAnalysisTemplate(TA)
TA_TEMPLATE_OPTIONS = {ta: {'description': TA_TEMPLATES.templates[ta]['description']} for ta in TA_TEMPLATES.templates}
